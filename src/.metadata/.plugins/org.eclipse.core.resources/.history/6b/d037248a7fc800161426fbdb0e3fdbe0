package shared;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.Map;
import java.util.TreeMap;

import javassist.CannotCompileException;
import javassist.NotFoundException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;

import trusted.Trusted;

public class main {

	
	private static void usage() {
		
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println(	"\t-i|--ip|/i ip_adress"
						+		"\t\tproxy/trusted device ip_adress");/*
		
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		

		arguments.put("--ip", "127.0.0.1");
		arguments.put("--port", "8000");
		arguments.put("--switch-mode", "normal");
		arguments.put("--initial-state", "T");
		arguments.put("--commands", "no");
		arguments.put("--verbose", "no");*/
	}
	
	private static void bad_usage() {
		
		System.err.println("Bad usage");
		
		usage();
		
		System.exit(1);
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		if(args.length < 1 || args.length%2 != 1)
			bad_usage();
		
		String command = args[0];
		
		if(command.equals("help")) {
			usage();
			return;
		}
		
		Map<String, String> arguments = new TreeMap<String, String>();
		
		arguments.put("--ip", "127.0.0.1");
		arguments.put("--port", "8000");
		arguments.put("--switch-mode", "normal");
		arguments.put("--initial-state", "T");
		arguments.put("--commands", "no");
		arguments.put("--verbose", "no");
		
		
		if(command.equals("trusted") ) {
			
			//modifyHandshaker();
				
			Trusted t = new Trusted(Values.PROXY_HOST, Values.PROXY_PORT);
			t.start(Values.SERVER_HOST, Values.SERVER_PORT);
			
		} else {
			
		}

	}

}
