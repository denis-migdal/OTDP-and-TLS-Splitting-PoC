package shared;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.net.UnknownHostException;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.Map;
import java.util.TreeMap;

import javassist.CannotCompileException;
import javassist.NotFoundException;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;

import proxy.Proxy;

import trusted.Trusted;

public class main {

	
	private static void usage() {
		
		System.out.println("tlsswitch help|proxy|trusted|server|init [options...]");
		System.out.println(	"\t-i|--ip|/i ip_adress"
						+		"\t\tproxy/trusted device ip_adress");/*
		
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		System.out.println("tlsswitch help|proxy|trusted [options...]");
		

		arguments.put("--ip", "127.0.0.1");
		arguments.put("--port", "8000");
		arguments.put("--switch-mode", "normal");
		arguments.put("--initial-state", "T");
		arguments.put("--commands", "no");
		arguments.put("--verbose", "no");*/
	}
	
	private static void bad_usage() {
		
		System.err.println("Bad usage");
		
		usage();
		
		System.exit(1);
	}
	
	/**
	 * @param args
	 * @throws IOException 
	 * @throws KeyStoreException 
	 * @throws FileNotFoundException 
	 * @throws CertificateException 
	 * @throws NoSuchAlgorithmException 
	 * @throws KeyManagementException 
	 * @throws CannotCompileException 
	 * @throws NotFoundException 
	 * @throws InterruptedException 
	 * @throws BadPaddingException 
	 * @throws IllegalBlockSizeException 
	 * @throws ClassNotFoundException 
	 * @throws InvocationTargetException 
	 * @throws NoSuchMethodException 
	 * @throws InstantiationException 
	 * @throws IllegalAccessException 
	 * @throws IllegalArgumentException 
	 * @throws SecurityException 
	 * @throws NoSuchFieldException 
	 */
	public static void main(String[] args) throws KeyManagementException, NoSuchAlgorithmException, CertificateException, FileNotFoundException, KeyStoreException, IOException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, ClassNotFoundException, IllegalBlockSizeException, BadPaddingException, InterruptedException, NotFoundException, CannotCompileException {
		
		if(args.length < 1 || args.length%2 != 1)
			bad_usage();
		
		String command = args[0];
		
		if(command.equals("help")) {
			usage();
			return;
		}
		
		Map<String, String> arguments = new TreeMap<String, String>();
		
		arguments.put("--proxy-ip", "127.0.0.1");
		arguments.put("--proxy-port", "8000");
		arguments.put("--server-ip", "127.0.0.1");
		arguments.put("--server-port", "8001");
		arguments.put("--switch-mode", "normal");
		
		arguments.put("--initial-state", "T");
		arguments.put("--commands", "no");
		arguments.put("--verbose", "no");
		
		
		for(int i = 1 ; i < args.length ; i +=2) {
			
			String option_name = null;
			
			switch(args[i]) {
			case "--proxy-ip":
				option_name = "--proxy_ip";
				break;
			case "--proxy-port":
				option_name = "--proxy_port";
				break;
			case "--server-ip":
				option_name = "--server_ip";
				break;
			case "--server-port":
				option_name = "--server_port";
				break;
			case "--switch-mode":
				option_name = "--switch-mode";
			default:
					bad_usage();
			}
			
			arguments.put(option_name, args[i+1]);
		}
		

		String proxy_ip = arguments.get("--proxy-ip");
		int proxy_port = Integer.parseInt(arguments.get("--proxy-port"));
		
		String server_ip = arguments.get("--server-ip");
		int server_port = Integer.parseInt(arguments.get("--server-port"));
			
		String switch_mode = arguments.get("--switch-mode");
		
		switch(command) {
		
		case "trusted":
			//modifyHandshaker();
			Trusted t = new Trusted(proxy_ip, proxy_port);
			t.setMode(switch_mode);
			t.start(server_ip, server_port);
			break;
		case "proxy":
			Proxy p = new Proxy();
			p.setMode(switch_mode);
			p.start(proxy_port);
			break;
		case "init":
			System.err.println("Not implemented !");
			System.err.println("Use the command-lines :");
			System.err.println("openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -passout pass:123456");
			System.err.println("keytool -import -file cert.pem -alias firstCA -keystore trustStore -storepass 123456");
			System.exit(2);
			break;
		case "server":
			System.err.println("Not implemented !");
			System.err.println("Use the command-line :");
			System.err.println("openssl s_server -accept server_port -key key.pem -cert cert.pem -pass pass:123456");
			System.exit(2);
			break;
		default:
				bad_usage();
		}

	}

}
